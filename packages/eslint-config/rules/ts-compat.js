const config = require("../config");

module.exports = {
  rules: {
    "@babel/no-unused-expressions": config.OFF,
    "@typescript-eslint/brace-style": [
      config.ERROR,
      "1tbs",
      {
        allowSingleLine: false,
      },
    ],
    "@typescript-eslint/comma-dangle": [
      config.ERROR,
      {
        arrays: "always-multiline",
        exports: "always-multiline",
        functions: "always-multiline",
        imports: "always-multiline",
        objects: "always-multiline",
      },
    ],
    "@typescript-eslint/comma-spacing": [
      config.ERROR,
      {
        after: true,
        before: false,
      },
    ],
    "@typescript-eslint/default-param-last": config.ERROR,

    "@typescript-eslint/func-call-spacing": [config.ERROR, "never"],
    "@typescript-eslint/indent": [config.ERROR, config.ERROR],
    "@typescript-eslint/init-declarations": config.OFF,
    "@typescript-eslint/keyword-spacing": [
      config.ERROR,
      {
        after: true,
        before: true,
      },
    ],
    "@typescript-eslint/lines-between-class-members": [config.ERROR, "always"],
    "@typescript-eslint/no-array-constructor": config.ERROR,
    "@typescript-eslint/no-dupe-class-members": config.ERROR,
    "@typescript-eslint/no-extra-parens": config.ERROR,
    "@typescript-eslint/no-extra-semi": config.ERROR,

    "@typescript-eslint/no-invalid-this": config.OFF,
    "@typescript-eslint/no-loop-func": config.ERROR,
    "@typescript-eslint/no-loss-of-precision": config.ERROR,
    "@typescript-eslint/no-magic-numbers": config.OFF,
    "@typescript-eslint/no-redeclare": [
      config.ERROR,
      {
        builtinGlobals: true,
      },
    ],
    "@typescript-eslint/no-restricted-imports": config.OFF,
    "@typescript-eslint/no-shadow": [
      config.ERROR,
      {
        builtinGlobals: false,
        hoist: "all",
      },
    ],

    "@typescript-eslint/no-unused-expressions": config.ERROR,
    "@typescript-eslint/no-unused-vars": config.ERROR,
    "@typescript-eslint/no-use-before-define": [
      config.ERROR,
      {
        classes: true,
        functions: false,
        variables: true,
      },
    ],
    "@typescript-eslint/no-useless-constructor": config.ERROR,
    "@typescript-eslint/object-curly-spacing": config.OFF,
    "@typescript-eslint/padding-line-between-statements": [
      config.ERROR,
      {
        blankLine: "always",
        next: "*",
        prev: "multiline-block-like",
      },
    ],
    "@typescript-eslint/quotes": [config.ERROR, "single"],
    "@typescript-eslint/require-await": config.OFF,
    "@typescript-eslint/semi": [config.ERROR, "always"],
    "@typescript-eslint/space-before-blocks": [config.ERROR, "always"],
    "@typescript-eslint/space-before-function-paren": [config.ERROR, "always"],
    "@typescript-eslint/space-infix-ops": config.ERROR,
    "brace-style": config.OFF,
    "comma-dangle": config.OFF,
    "comma-spacing": config.OFF,
    "default-param-last": config.OFF,
    "dot-notation": config.OFF,
    "func-call-spacing": config.OFF,
    "indent": config.OFF,
    "init-declarations": config.OFF,
    "keyword-spacing": config.OFF,
    "lines-between-class-members": config.OFF,
    "no-array-constructor": config.OFF,
    "no-dupe-class-members": config.OFF,
    "no-duplicate-imports": config.OFF,
    "no-empty-function": config.OFF,
    "no-extra-parens": config.OFF,
    "no-extra-semi": config.OFF,
    "no-implied-eval": config.OFF,
    "no-invalid-this": config.OFF,
    "no-loop-func": config.OFF,
    "no-loss-of-precision": config.OFF,
    "no-magic-numbers": config.OFF,
    "no-redeclare": config.OFF,
    "no-restricted-imports": config.OFF,
    "no-shadow": config.OFF,
    "no-throw-literal": config.OFF,
    "no-unused-expressions": config.OFF,
    "no-unused-vars": config.OFF,
    "no-use-before-define": config.OFF,
    "no-useless-constructor": config.OFF,
    "object-curly-spacing": config.OFF,
    "padding-line-between-statements": config.OFF,
    "quotes": config.OFF,
    "react/prop-types": config.OFF,
    "require-await": config.OFF,
    "semi": config.OFF,
    "space-before-blocks": config.OFF,
    "space-before-function-paren": config.OFF,
    "space-infix-ops": config.OFF,
  },
};
